name: 🚀 간단한 배포

on:
  push:
    branches: main
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  deploy:
    name: 빌드 및 배포
    runs-on: ubuntu-latest
    steps:
      - name: 1. 체크아웃
        uses: actions/checkout@v4

      - name: 2. pnpm 설치
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: 3. Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"

      - name: 4. 의존성 설치 및 nginx.conf 생성
        run: |
          pnpm install --frozen-lockfile
          pnpm generate

          if [ ! -f "nginx.conf" ]; then
            echo "❌ nginx.conf 파일이 생성되지 않았습니다!"
            exit 1
          fi
          echo "✅ nginx.conf 파일이 성공적으로 생성되었습니다."

      - name: 5. GHCR 로그인
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 5.1 Docker Buildx 설정
        uses: docker/setup-buildx-action@v3

      - name: 6. 이미지 빌드 및 푸쉬
        uses: docker/build-push-action@v6
        id: build
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.sha }}
            ghcr.io/${{ github.repository }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 6.1 변수 설정
        run: |
          echo "IMAGE_NAME=ghcr.io/${{ github.repository }}:latest" >> $GITHUB_ENV
          echo "CONTAINER_NAME=nginx-redirect" >> $GITHUB_ENV
          echo "NETWORK_NAME=nginx-proxy-manager_default" >> $GITHUB_ENV

      - name: 7. 서버 배포
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.ORACLE_SERVER_IP }}
          username: ${{ secrets.ORACLE_SERVER_USERNAME }}
          key: ${{ secrets.ORACLE_SERVER_KEY }}
          script: |
            set -e # 오류 발생 시 스크립트 종료

            # GHCR 로그인
            echo "✅ GHCR 로그인"
            echo ${{ secrets.GITHUB_TOKEN }} | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # 이전 컨테이너 정리
            echo "✅ 이전 컨테이너 정리"
            sudo docker stop ${{ env.CONTAINER_NAME }} || true
            sudo docker rm ${{ env.CONTAINER_NAME }} || true
            sudo docker image prune -f

            # 새 이미지 배포
            echo "✅ 새 이미지 배포"
            sudo docker pull ${{ env.IMAGE_NAME }}
            sudo docker run -d --name ${{ env.CONTAINER_NAME }} --network ${{ env.NETWORK_NAME }} -p 8080:80 ${{ env.IMAGE_NAME }}

            # 배포 확인
            echo "✅ 배포 확인"
            sleep 3
            sudo docker ps | grep ${{ env.CONTAINER_NAME }}
            sudo docker logs --tail 30 ${{ env.CONTAINER_NAME }} || true

            # 완료 후 GHCR 로그아웃
            echo "✅ GHCR 로그아웃"
            sudo docker logout ghcr.io
